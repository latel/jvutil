{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["const REGEX_A_NUMBER = /^(-|\\+)?[\\d.]+$/;\n/**\n * 元单位转换为分单位\n * @param val 需要转换的数字\n */\nexport const yuan2fen = (val: number | string): string => {\n  // 强制转换成字符串\n  val = String(val);\n  return REGEX_A_NUMBER.test(val) ? (parseFloat(val) * 100).toFixed(2) : \"0.00\";\n};\n\n/**\n * 分单位转换为元单位\n * @param val 需要转换的数字\n */\nexport const fen2yuan = (val: number | string): string => {\n  // 强制转换成字符串\n  val = String(val);\n  return REGEX_A_NUMBER.test(val) ? (parseFloat(val) / 100).toFixed(2) : \"0.00\";\n};\n\ninterface ToTextOptions {\n  /** 单位（股/手/张等） */\n  unit?: string;\n  /** 接受转换最低金额，如指定超过10万才处理转换 */\n  baseline?: number;\n  /** 是否尽可能的去除尾部多余的0，如1.200张->1.2张，默认不去除 */\n  strip?: boolean;\n}\n\n/**\n * 格式化大数为指定的单位，如：12345.67 => 1.23万\n * @param value 需要转换的数字\n * @param decimal 需要保留的小数位个数，默认两位，切割时遵循四舍五入\n * @param options 额外参数\n */\nexport const toText = (\n  value: number | string,\n  decimal = 2,\n  options?: ToTextOptions\n): string | number => {\n  const {\n    unit = \"\" /* 默认单位为空 */,\n    baseline = 10000 /* 默认转换万以上的数字 */,\n    strip = false /* 默认不去除多余的尾部0 */,\n  } = options || {};\n  let val: number = +value;\n  let ret: string = String(val);\n  // 不对异常数据处理\n  if (isNaN(val)) {\n    return value;\n  }\n  let absVal = Math.abs(val);\n  if (absVal < Math.pow(10, 4) || absVal < baseline) {\n    ret = val.toFixed(decimal);\n  } else if (absVal >= Math.pow(10, 4) && absVal < Math.pow(10, 8)) {\n    ret = (val / 10000).toFixed(decimal) + \"万\";\n  } else if (absVal >= Math.pow(10, 8) && absVal < Math.pow(10, 11)) {\n    ret = (val / 100000000).toFixed(decimal) + \"亿\";\n  }\n  ret = strip ? ret.replace(/\\.?0+([万亿]?)$/, \"$1\") : ret;\n  return ret + unit;\n};\n\n/**\n * 转换为常用货币展示格式，按千分割数字，如：-12345.6 => -12,345.60\n *\n * *如果收到异常数据，则会原样返回*\n * @param val 需要转换的数字\n * @param decimal 需要保留的小数位个数，默认2位，切割时遵循四舍五入\n * @param strip 是否去除结尾多余的0，如12345.10 => 12,345.1，默认不去除\n */\nexport const toCurrency = (\n  val: number | string,\n  decimal = 2,\n  strip = false\n): string => {\n  val = String(val) || \"\";\n  if (!/^(\\-?)(\\d+)(\\.\\d+)?$/.exec(val)) {\n    return val;\n  }\n  let valStr = Number(val).toFixed(decimal);\n  const [integer, dec] = valStr.split(\".\");\n  valStr = [integer.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"), dec].filter(Boolean).join(\n    \".\"\n  );\n  valStr = strip ? valStr.replace(/\\.?0+$/, \"\") : valStr;\n  return valStr;\n};\n\nexport default {\n  fen2yuan,\n  yuan2fen,\n  toText,\n  toCurrency,\n};\n"],"names":["REGEX_A_NUMBER","yuan2fen","val","String","test","parseFloat","toFixed","fen2yuan","toText","value","decimal","options","unit","baseline","strip","ret","isNaN","absVal","Math","abs","pow","replace","toCurrency","exec","valStr","Number","split","dec","toString","filter","Boolean","join"],"mappings":"4LAAA,IAAMA,EAAiB,kBAKVC,EAAW,SAACC,GAGvB,OADAA,EAAMC,OAAOD,GACNF,EAAeI,KAAKF,IAA0B,IAAlBG,WAAWH,IAAYI,QAAQ,GAAK,QAO5DC,EAAW,SAACL,GAGvB,OADAA,EAAMC,OAAOD,GACNF,EAAeI,KAAKF,IAAQG,WAAWH,GAAO,KAAKI,QAAQ,GAAK,QAkB5DE,EAAS,SACpBC,EACAC,EACAC,YADAD,IAAAA,EAAU,SAONC,GAAW,OAHbC,KAAAA,aAAO,SACPC,SAAAA,aAAW,UACXC,MAAAA,gBAEEZ,GAAeO,EACfM,EAAcZ,OAAOD,GAEzB,GAAIc,MAAMd,GACR,OAAOO,EAET,IAAIQ,EAASC,KAAKC,IAAIjB,GAStB,OARIe,EAASC,KAAKE,IAAI,GAAI,IAAMH,EAASJ,EACvCE,EAAMb,EAAII,QAAQI,GACTO,GAAUC,KAAKE,IAAI,GAAI,IAAMH,EAASC,KAAKE,IAAI,GAAI,GAC5DL,GAAOb,EAAM,KAAOI,QAAQI,GAAW,IAC9BO,GAAUC,KAAKE,IAAI,GAAI,IAAMH,EAASC,KAAKE,IAAI,GAAI,MAC5DL,GAAOb,EAAM,KAAWI,QAAQI,GAAW,MAE7CK,EAAMD,EAAQC,EAAIM,QAAQ,gBAAiB,MAAQN,GACtCH,GAWFU,EAAa,SACxBpB,EACAQ,EACAI,GAGA,YAJAJ,IAAAA,EAAU,YACVI,IAAAA,GAAQ,GAERZ,EAAMC,OAAOD,IAAQ,IAChB,uBAAuBqB,KAAKrB,GAC/B,OAAOA,EAET,IAAIsB,EAASC,OAAOvB,GAAKI,QAAQI,KACVc,EAAOE,MAAM,KAApBC,OAKhB,OAJAH,EAAS,MAASI,WAAWP,QAAQ,wBAAyB,KAAMM,GAAKE,OAAOC,SAASC,KACvF,KAEOjB,EAAQU,EAAOH,QAAQ,SAAU,IAAMG,aAInC,CACbjB,SAAAA,EACAN,SAAAA,EACAO,OAAAA,EACAc,WAAAA"}